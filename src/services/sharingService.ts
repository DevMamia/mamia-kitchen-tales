interface ShoppingListItem {
  ingredient_name: string;
  quantity?: string;
  category?: string;
  checked: boolean;
}

interface ShareOptions {
  title?: string;
  includeCheckedItems?: boolean;
  format?: 'simple' | 'detailed' | 'emoji';
}

export class SharingService {
  async shareShoppingList(items: ShoppingListItem[], options: ShareOptions = {}): Promise<boolean> {
    const {
      title = 'My Shopping List',
      includeCheckedItems = false,
      format = 'simple'
    } = options;

    const content = this.formatShoppingList(items, { title, includeCheckedItems, format });

    // Try native Web Share API first (mobile browsers)
    if (navigator.share && this.isMobileDevice()) {
      try {
        await navigator.share({
          title,
          text: content,
        });
        return true;
      } catch (error) {
        console.log('Native sharing failed, falling back to clipboard');
      }
    }

    // Fallback to clipboard
    return this.copyToClipboard(content);
  }

  async shareViaEmail(items: ShoppingListItem[], options: ShareOptions = {}): Promise<void> {
    const {
      title = 'My Shopping List',
      includeCheckedItems = false,
      format = 'detailed'
    } = options;

    const content = this.formatShoppingList(items, { title, includeCheckedItems, format });
    const subject = encodeURIComponent(title);
    const body = encodeURIComponent(content);
    
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;
    window.open(mailtoUrl, '_blank');
  }

  async shareViaSMS(items: ShoppingListItem[], options: ShareOptions = {}): Promise<void> {
    const {
      title = 'Shopping List',
      includeCheckedItems = false,
      format = 'simple'
    } = options;

    const content = this.formatShoppingList(items, { title, includeCheckedItems, format });
    const body = encodeURIComponent(content);
    
    const smsUrl = `sms:?body=${body}`;
    window.open(smsUrl, '_blank');
  }

  async shareViaWhatsApp(items: ShoppingListItem[], options: ShareOptions = {}): Promise<void> {
    const {
      title = 'Shopping List',
      includeCheckedItems = false,
      format = 'emoji'
    } = options;

    const content = this.formatShoppingList(items, { title, includeCheckedItems, format });
    const text = encodeURIComponent(content);
    
    const whatsappUrl = `https://wa.me/?text=${text}`;
    window.open(whatsappUrl, '_blank');
  }

  generateQRCode(items: ShoppingListItem[], options: ShareOptions = {}): string {
    const content = this.formatShoppingList(items, options);
    const encodedContent = encodeURIComponent(content);
    
    // Using QR Server API for simplicity
    return `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodedContent}`;
  }

  private formatShoppingList(items: ShoppingListItem[], options: ShareOptions): string {
    const {
      title = 'Shopping List',
      includeCheckedItems = false,
      format = 'simple'
    } = options;

    const filteredItems = includeCheckedItems 
      ? items 
      : items.filter(item => !item.checked);

    if (filteredItems.length === 0) {
      return `${title}\n\nNo items to buy! üéâ`;
    }

    let content = `${title}\n`;
    content += '='.repeat(title.length) + '\n\n';

    if (format === 'emoji') {
      content += this.formatWithEmojis(filteredItems);
    } else if (format === 'detailed') {
      content += this.formatDetailed(filteredItems);
    } else {
      content += this.formatSimple(filteredItems);
    }

    content += `\n\nGenerated by MAMIA Cooking App üë©‚Äçüç≥`;
    
    return content;
  }

  private formatSimple(items: ShoppingListItem[]): string {
    return items.map(item => {
      const quantity = item.quantity ? `${item.quantity} ` : '';
      const check = item.checked ? '‚úÖ' : '‚òê';
      return `${check} ${quantity}${item.ingredient_name}`;
    }).join('\n');
  }

  private formatDetailed(items: ShoppingListItem[]): string {
    // Group by category
    const grouped = items.reduce((acc, item) => {
      const category = item.category || 'Other';
      if (!acc[category]) acc[category] = [];
      acc[category].push(item);
      return acc;
    }, {} as { [key: string]: ShoppingListItem[] });

    let content = '';
    Object.entries(grouped).forEach(([category, categoryItems]) => {
      content += `üìÇ ${category.toUpperCase()}\n`;
      categoryItems.forEach(item => {
        const quantity = item.quantity ? `${item.quantity} ` : '';
        const check = item.checked ? '‚úÖ' : '‚òê';
        content += `  ${check} ${quantity}${item.ingredient_name}\n`;
      });
      content += '\n';
    });

    return content;
  }

  private formatWithEmojis(items: ShoppingListItem[]): string {
    const emojiMap: { [key: string]: string } = {
      'produce': 'ü•¨',
      'meat': 'ü•©',
      'dairy': 'ü•õ',
      'pantry': 'ü•´',
      'frozen': 'üßä',
      'bakery': 'üçû',
      'beverages': 'ü•§',
      'snacks': 'üçø',
      'health': 'üß¥',
      'other': 'üì¶'
    };

    return items.map(item => {
      const quantity = item.quantity ? `${item.quantity} ` : '';
      const check = item.checked ? '‚úÖ' : '‚òê';
      const category = item.category?.toLowerCase() || 'other';
      const emoji = emojiMap[category] || 'üì¶';
      return `${check} ${emoji} ${quantity}${item.ingredient_name}`;
    }).join('\n');
  }

  private async copyToClipboard(text: string): Promise<boolean> {
    try {
      if (navigator.clipboard) {
        await navigator.clipboard.writeText(text);
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        document.execCommand('copy');
        textArea.remove();
      }
      return true;
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      return false;
    }
  }

  private isMobileDevice(): boolean {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }
}

export const sharingService = new SharingService();